<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

//  导入MultipleOutputHelper.ttinclude文件
<#@include file="$(SolutionDir)\T4\MultipleOutputHelper.ttinclude"#> 

<#        
        string connectionString= Manager.appcon;        
        SqlConnection conn = new SqlConnection(connectionString);
        conn.Open();
    
        string selectQuery ="SET FMTONLY ON; select * from @tableName; SET FMTONLY OFF;";
        SqlCommand command = new SqlCommand(selectQuery,conn);
        SqlDataAdapter ad = new SqlDataAdapter(command);
        System.Data.DataSet ds = new DataSet(); 
  
        var manager = Manager.Create(Host, GenerationEnvironment);  
        System.Data.DataTable schema = conn.GetSchema("Tables");
		string createtime=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        foreach(System.Data.DataRow row in schema.Rows)
        {    
            ds.Tables.Clear();
            string tb_name= row["TABLE_NAME"].ToString();        
            command.CommandText = selectQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
            ad.FillSchema(ds, SchemaType.Mapped,tb_name);  
            manager.StartNewFile(tb_name+"Dal.cs");#>
/*******************************************************************************************
 * 此代码由T4模板自动生成
 * 对此文件的更改可能会导致不正确的行为，并且如果
 * 重新生成代码，这些更改将会丢失。
 * 日期:<#=createtime#>
 * 作者:huijun zhu<kngcbzdsn@outlook.com> 
 * 此技术信息为本公司机密信息，未经本公司书面同意禁止向第三方披露．　                   
 * 版权所有：榆钱（北京）科技有限公司　　　　　　          
 * 此模板生成实体层:Rainbow.Models　　　　　                 
 * *******************************************************************************************/
using System;
using System.Collections.Generic;
using Rainbow.IDal;
using Rainbow.Models;


namespace Rainbow.Dal
{    
    /// <summary>
    /// <#=tb_name#>Dal实现
    /// </summary>
    public partial class <#=tb_name#>Dal:I<#=tb_name#>Dal    
    {    
	    public <#=tb_name#> Create()
        {
            throw new NotImplementedException();
        }

        public bool Update(<#=tb_name#> entity)
        {
            throw new NotImplementedException();
        }

        public void Edit(<#=tb_name#> entity)
        {
            throw new NotImplementedException();
        }
		/// <summary>
        /// 插入记录
        /// </summary>
        /// <param name="entity">实体<#=tb_name#></param>
        /// <returns></returns>
        public int Insert(<#=tb_name#> entity)
        {
            using (var sqlConnection= ContextFactory.GetContext())
            {
                sqlConnection.Open();
                var db = MyDatabase.Init(sqlConnection, commandTimeout: 2);
                int? supplierId = db.<#=tb_name#>s.Insert(entity);
                return supplierId.Value;

            }
        }
		/// <summary>
        /// 查询所有数据
        /// </summary>
        /// <returns></returns>
		public IEnumerable<<#=tb_name#>> GetAll()
        {
			using (var sqlConnection = ContextFactory.GetContext())
            {
                sqlConnection.Open();
                var db = MyDatabase.Init(sqlConnection, commandTimeout: 5);

                var result = db.<#=tb_name#>s.All();
                return result;
            }
        }
    }
}
    
<#
        manager.EndBlock();    
         }            
        conn.Close();  
       manager.Process(true);  
#>